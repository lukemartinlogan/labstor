  template<typename ...Args>
  HSHM_ALWAYS_INLINE
  TypedPushTask<CUSTOM##Task>* Async##CUSTOM##Root(const DomainId &domain_id,
                                              Args&& ...args) {
    TaskNode task_node = LABSTOR_CLIENT->MakeTaskNodeId();
    hipc::Pointer p, push_p;
    MultiQueue *queue = LABSTOR_CLIENT->GetQueue(queue_id_);
    // The first task
    auto *task = LABSTOR_CLIENT->NewTask<CUSTOM##Task>(
        p, task_node, domain_id, id_, std::forward<Args>(args)...);
    // The push task
    auto *push_task = LABSTOR_CLIENT->NewTask<TypedPushTask<CUSTOM##Task>>(
        p, task_node, domain_id, id_, push_p);
    queue->Emplace(push_task->lane_hash_, push_p);
    return push_task;
  }